# Generated by Django 4.2.7 on 2025-08-29 13:25

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_name', models.CharField(max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('terms', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
                'db_table': 'academic_years',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('assignment_type', models.CharField(choices=[('assignment', 'Assignment'), ('quiz', 'Quiz'), ('test', 'Test'), ('exam', 'Exam'), ('project', 'Project'), ('presentation', 'Presentation')], max_length=20)),
                ('max_score', models.FloatField()),
                ('due_date', models.DateTimeField()),
                ('submission_deadline', models.DateTimeField()),
                ('instructions', models.TextField(blank=True)),
                ('rubric', models.JSONField(default=dict)),
                ('allow_late_submission', models.BooleanField(default=False)),
                ('late_penalty_percentage', models.FloatField(default=0.0)),
                ('ai_grading_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
                'db_table': 'assignments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('period', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused')], max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('marked_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Attendance',
                'verbose_name_plural': 'Attendance Records',
                'db_table': 'attendance',
            },
        ),
        migrations.CreateModel(
            name='BehaviorNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('behavior_type', models.CharField(choices=[('positive', 'Positive'), ('improvement', 'Needs Improvement'), ('disciplinary', 'Disciplinary')], max_length=20)),
                ('note', models.TextField()),
                ('voice_note_url', models.URLField(blank=True)),
                ('incident_date', models.DateField()),
                ('action_taken', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('parent_notified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Behavior Note',
                'verbose_name_plural': 'Behavior Notes',
                'db_table': 'behavior_notes',
                'ordering': ['-incident_date'],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_id', models.CharField(max_length=10)),
                ('class_name', models.CharField(max_length=50)),
                ('level', models.CharField(choices=[('primary', 'Primary'), ('secondary_o', 'Secondary O-Level'), ('secondary_a', 'Secondary A-Level')], max_length=20)),
                ('max_students_per_section', models.IntegerField(default=40)),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'db_table': 'classes',
            },
        ),
        migrations.CreateModel(
            name='ClassSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_name', models.CharField(max_length=5)),
                ('room_number', models.CharField(blank=True, max_length=20)),
                ('capacity', models.IntegerField(default=40)),
            ],
            options={
                'verbose_name': 'Class Section',
                'verbose_name_plural': 'Class Sections',
                'db_table': 'class_sections',
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('percentage', models.FloatField()),
                ('letter_grade', models.CharField(blank=True, max_length=5)),
                ('feedback', models.TextField(blank=True)),
                ('ai_feedback', models.TextField(blank=True)),
                ('voice_feedback_url', models.URLField(blank=True)),
                ('graded_at', models.DateTimeField(auto_now_add=True)),
                ('is_ai_assisted', models.BooleanField(default=False)),
                ('submission_date', models.DateTimeField()),
                ('is_late_submission', models.BooleanField(default=False)),
                ('late_penalty_applied', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Grade',
                'verbose_name_plural': 'Grades',
                'db_table': 'grades',
            },
        ),
        migrations.CreateModel(
            name='LearningResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('file', 'File'), ('video', 'Video'), ('link', 'Link'), ('document', 'Document'), ('image', 'Image'), ('audio', 'Audio')], max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='learning_resources/')),
                ('url', models.URLField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Learning Resource',
                'verbose_name_plural': 'Learning Resources',
                'db_table': 'learning_resources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Student Enrollment',
                'verbose_name_plural': 'Student Enrollments',
                'db_table': 'student_enrollments',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_code', models.CharField(max_length=10)),
                ('subject_name', models.CharField(max_length=100)),
                ('subject_name_fr', models.CharField(blank=True, max_length=100)),
                ('subject_name_rw', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_core', models.BooleanField(default=False)),
                ('applicable_levels', models.JSONField(default=list)),
                ('credit_hours', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'db_table': 'subjects',
            },
        ),
        migrations.CreateModel(
            name='SubjectCombination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('combination_id', models.CharField(max_length=10)),
                ('combination_name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Subject Combination',
                'verbose_name_plural': 'Subject Combinations',
                'db_table': 'subject_combinations',
            },
        ),
        migrations.CreateModel(
            name='TeacherSubjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periods_per_week', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Teacher Subject Assignment',
                'verbose_name_plural': 'Teacher Subject Assignments',
                'db_table': 'teacher_subject_assignments',
            },
        ),
        migrations.CreateModel(
            name='TimeTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday')], max_length=20)),
                ('period_number', models.IntegerField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('room', models.CharField(blank=True, max_length=50)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='academics.academicyear')),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='academics.class')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='academics.classsection')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_slots', to='academics.subject')),
            ],
            options={
                'verbose_name': 'Time Table',
                'verbose_name_plural': 'Time Tables',
                'db_table': 'timetables',
                'ordering': ['day_of_week', 'period_number'],
            },
        ),
    ]
