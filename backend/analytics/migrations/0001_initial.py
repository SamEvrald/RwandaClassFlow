# Generated by Django 4.2.7 on 2025-08-29 13:25

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
        ('users', '0001_initial'),
        ('schools', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PerformanceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('term', 'Term Report'), ('monthly', 'Monthly Report'), ('subject', 'Subject Report'), ('behavioral', 'Behavioral Report')], max_length=20)),
                ('report_period_start', models.DateField()),
                ('report_period_end', models.DateField()),
                ('overall_grade', models.CharField(blank=True, max_length=5)),
                ('overall_percentage', models.FloatField(blank=True, null=True)),
                ('teacher_comments', models.TextField(blank=True)),
                ('headteacher_comments', models.TextField(blank=True)),
                ('ai_insights', models.JSONField(default=dict)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='users.teacher')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='users.student')),
            ],
            options={
                'verbose_name': 'Performance Report',
                'verbose_name_plural': 'Performance Reports',
                'db_table': 'performance_reports',
            },
        ),
        migrations.CreateModel(
            name='LearningInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('performance_pattern', 'Performance Pattern'), ('learning_difficulty', 'Learning Difficulty'), ('improvement_suggestion', 'Improvement Suggestion'), ('strength_identification', 'Strength Identification')], max_length=30)),
                ('insight_text', models.TextField()),
                ('confidence_score', models.FloatField()),
                ('recommended_actions', models.JSONField(default=list)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_by_teacher', models.BooleanField(default=False)),
                ('teacher_feedback', models.TextField(blank=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_insights', to='users.student')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='academics.subject')),
            ],
            options={
                'verbose_name': 'Learning Insight',
                'verbose_name_plural': 'Learning Insights',
                'db_table': 'learning_insights',
            },
        ),
        migrations.CreateModel(
            name='SubjectPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_assignments', models.IntegerField(default=0)),
                ('assignments_completed', models.IntegerField(default=0)),
                ('average_score', models.FloatField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, max_length=5)),
                ('teacher_comments', models.TextField(blank=True)),
                ('improvement_areas', models.JSONField(default=list)),
                ('strengths', models.JSONField(default=list)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_performances', to='analytics.performancereport')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.subject')),
            ],
            options={
                'verbose_name': 'Subject Performance',
                'verbose_name_plural': 'Subject Performances',
                'db_table': 'subject_performances',
                'unique_together': {('report', 'subject')},
            },
        ),
        migrations.CreateModel(
            name='SchoolAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('total_students', models.IntegerField()),
                ('total_teachers', models.IntegerField()),
                ('overall_attendance_rate', models.FloatField()),
                ('overall_performance', models.FloatField()),
                ('top_performing_classes', models.JSONField(default=list)),
                ('improvement_areas', models.JSONField(default=dict)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='schools.school')),
            ],
            options={
                'verbose_name': 'School Analytics',
                'verbose_name_plural': 'School Analytics',
                'db_table': 'school_analytics',
                'unique_together': {('school', 'period_start', 'period_end')},
            },
        ),
        migrations.CreateModel(
            name='ClassAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('total_students', models.IntegerField()),
                ('average_performance', models.FloatField()),
                ('top_performers', models.JSONField(default=list)),
                ('struggling_students', models.JSONField(default=list)),
                ('attendance_rate', models.FloatField()),
                ('completion_rate', models.FloatField()),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='academics.class')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.subject')),
            ],
            options={
                'verbose_name': 'Class Analytics',
                'verbose_name_plural': 'Class Analytics',
                'db_table': 'class_analytics',
                'unique_together': {('school_class', 'subject', 'period_start', 'period_end')},
            },
        ),
    ]
