# Generated by Django 4.2.7 on 2025-08-29 13:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0001_initial'),
        ('schools', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'System Administrator'), ('school_admin', 'School Administrator'), ('teacher', 'Teacher'), ('student', 'Student'), ('parent', 'Parent/Guardian')], max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('rw', 'Kinyarwanda')], default='en', max_length=5)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('is_first_login', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('province', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(blank=True, max_length=100)),
                ('sector', models.CharField(blank=True, max_length=100)),
                ('cell', models.CharField(blank=True, max_length=100)),
                ('village', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=200)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=True)),
                ('whatsapp_notifications', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schools.school')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SchoolAdmin',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('position', models.CharField(max_length=100)),
                ('employment_date', models.DateField()),
                ('responsibilities', models.JSONField(default=list)),
                ('can_manage_teachers', models.BooleanField(default=True)),
                ('can_manage_students', models.BooleanField(default=True)),
                ('can_manage_finances', models.BooleanField(default=False)),
                ('can_generate_reports', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'School Administrator',
                'verbose_name_plural': 'School Administrators',
                'db_table': 'school_admins',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='light', max_length=20)),
                ('dashboard_layout', models.JSONField(default=dict)),
                ('notification_settings', models.JSONField(default=dict)),
                ('privacy_settings', models.JSONField(default=dict)),
                ('accessibility_settings', models.JSONField(default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('employment_date', models.DateField()),
                ('qualification', models.CharField(blank=True, max_length=200)),
                ('specialization', models.CharField(blank=True, max_length=200)),
                ('years_of_experience', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('leave', 'On Leave'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('national_id', models.CharField(blank=True, max_length=20, unique=True)),
                ('teaching_license_number', models.CharField(blank=True, max_length=50)),
                ('salary_scale', models.CharField(blank=True, max_length=20)),
                ('bank_account_number', models.CharField(blank=True, max_length=50)),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('certifications', models.JSONField(default=list)),
                ('training_records', models.JSONField(default=list)),
                ('classes_assigned', models.ManyToManyField(blank=True, related_name='teachers', to='academics.class')),
                ('subjects_taught', models.ManyToManyField(blank=True, related_name='teachers', to='academics.subject')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'db_table': 'teachers',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('student_id', models.CharField(max_length=50, unique=True)),
                ('enrollment_date', models.DateField()),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('transferred', 'Transferred'), ('expelled', 'Expelled')], default='active', max_length=20)),
                ('national_id', models.CharField(blank=True, max_length=20, unique=True)),
                ('birth_certificate_number', models.CharField(blank=True, max_length=50)),
                ('previous_school', models.CharField(blank=True, max_length=200)),
                ('admission_date', models.DateField(blank=True, null=True)),
                ('graduation_date', models.DateField(blank=True, null=True)),
                ('special_needs', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('medical_conditions', models.TextField(blank=True)),
                ('medication_required', models.TextField(blank=True)),
                ('scholarship_info', models.JSONField(default=dict)),
                ('fee_status', models.CharField(choices=[('paid', 'Paid'), ('partial', 'Partially Paid'), ('pending', 'Pending'), ('waived', 'Waived')], default='pending', max_length=20)),
                ('current_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='academics.class')),
                ('current_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='academics.classsection')),
                ('subject_combination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='academics.subjectcombination')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'db_table': 'students',
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Guardian'), ('other', 'Other')], max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100)),
                ('workplace', models.CharField(blank=True, max_length=200)),
                ('work_phone', models.CharField(blank=True, max_length=20)),
                ('national_id', models.CharField(blank=True, max_length=20, unique=True)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed'), ('other', 'Other')], max_length=20)),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('can_pay_fees', models.BooleanField(default=True)),
                ('payment_method_preference', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('mobile_money', 'Mobile Money'), ('check', 'Check')], default='mobile_money', max_length=20)),
                ('children', models.ManyToManyField(related_name='parents', to='users.student')),
            ],
            options={
                'verbose_name': 'Parent/Guardian',
                'verbose_name_plural': 'Parents/Guardians',
                'db_table': 'parents',
            },
        ),
    ]
